---
title: Deploying Ops Manager on AWS
owner: Ops Manager
---

This topic describes how to deploy <%= vars.ops_manager_first %> on Amazon Web Services (AWS).

Before you deploy <%= vars.ops_manager %>, see the preparation steps in [Preparing to Deploy <%= vars.ops_manager %> on AWS](prepare-env-manual.html).

After you complete this procedure, follow the instructions in [Configuring BOSH Director on AWS](config-manual.html).


## <a id='pcfaws-om-ami'></a> Step 1: Launch an <%= vars.ops_manager %> AMI

To launch an Amazon Machine Image (AMI) for <%= vars.ops_manager %>:

1. Navigate to the **<%= vars.ops_manager %>** section of [VMware Tanzu Network](https://network.pivotal.io/products/ops-manager).

1. Select the version of <%= vars.ops_manager %> you want to install from the **Releases** dropdown.

1. In the **Release Download Files**, click the file named **<%= vars.ops_manager %> for AWS** to download a PDF.

1. Open the PDF and identify the AMI ID for your region.

1. Return to the EC2 Dashboard.

1. Click **AMIs** from the **Images** menu.

1. Select **Public images** from the dropdown filter that says **Owned by me**.

1. Paste the AMI ID for your region into the search bar and press enter.
    <p class='note'><strong>Note:</strong> There is a different AMI for each region. If you cannot locate the AMI for your region, verify that you have set your AWS Management Console to your desired region. If you still cannot locate the AMI, log in to the <a href="https://network.pivotal.io">VMware Tanzu Network</a> and file a support ticket.</p>

1. (Optional) If you want to encrypt the VM that runs <%= vars.ops_manager %> with AWS Key Management Service (KMS), perform the following additional steps:
  1. Right click the row that lists your AMI and click **Copy AMI**.
  1. Select your **Destination region**.
  1. Enable **Encryption**. For more information about AMI encryption, see [Encryption and AMI Copy](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html#ami-copy-encryption) from the *Copying an AMI* topic in the AWS documentation.
  1. Select your **Master Key**. To create a new custom key, see [Creating Keys](https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html) in the AWS documentation.
  1. Click **Copy AMI**. You can use the new AMI you copied for the following steps.

1. Select the row that lists your <%= vars.ops_manager %> AMI and click **Launch instance from AMI**.

1. On the **Launch an instance** page, for **Name** enter a name for the <%= vars.ops_manager %> VM. For example, enter `pcf-ops-manager`.

1. Choose **m5.large** for your instance type.

1. Select the `pcf-ops-manager-key` key pair, confirm that you have access to the private key file. You use this key pair to access the <%= vars.ops_manager %> VM.

1. In the **Network settings** section, click **Edit** and configure the following for your instance:
    * **Network**: Select the VPC that you created.
    * **Subnet**: Select `pcf-public-subnet-az0` to allow traffic from public IP addresses, or `pcf-management-subnet-az0` to allow traffic only from private IP addresses.
    * **Auto-assign for Public IP**: Select **Enable** to allow traffic from public IP addresses, or **Disable** to allow traffic only from private IP addresses.
    * **Firewall (security groups)**: Click **Select an existing security group** and select the `pcf-ops-manager-security-group` that you created in [Configure a Security Group for <%= vars.ops_manager %>](prepare-env-manual.html#pcfaws-om-secgrp) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.
    * For all other fields, accept the default values.

1. In the **Configure storage** section, adjust the **Size (GiB)** value.
The default persistent disk value is 8&nbsp;GB. <%= vars.company_name %> recommends increasing this value to a minimum of 100&nbsp;GB.

1. (Optional) If you are using IAM roles, perform the following additional steps:
  1. Click the **Advanced details** section to expand it.
  1. Select the IAM role associated with the role created in [Create an IAM Role or User for <%= vars.ops_manager%>](prepare-env-manual.html#create-iam) in _Preparing to Deploy <%= vars.ops_manager %>_.
  1. For all other fields, accept the default values.

1. In the **Summary** section, ensure that the number of instances is 1.

1. Click **Launch instance**.

1. Click **View all instances** to access the **Instances** page on the EC2 Dashboard.


## <a id='pcfaws-web-lb'></a> Step 2: Create Web Load Balancer

1. On the EC2 Dashboard, click **Load Balancers**.

1. Click **Create Load Balancer**.

1. Under **Application Load Balancer**, click **Create**.

1. For **Step 1: Configure Load Balancer**:
  1. Under **Basic Configuration**:
      * For **Name**, enter `pcf-web-elb`.
      * For **Scheme**, select **internet-facing** to allow traffic from public IP addresses, or **internal** to allow traffic only from private IP addresses.
      * For **IP address type**, select the type of IP addresses that you want to allow.
  1. Under **Listeners**, click **Add listener**. For **Load Balancer Protocol**, select **HTTPS**.
  1. Under **Availability Zones**, select your VPC
  1. Check all availability zones. For each availability zone, select `pcf-public-subnet-az0` to allow traffic from public IP addresses, or `pcf-management-subnet-az0` to allow traffic only from private IP addresses.
  1. Click **Next: Configure Security Settings**.

1. For **Step 2: Configure Security Settings**:
  1. Under **Select default certificate**, do one of the following:
      - If you already have a certificate from AWS Certificate Manager (ACM), select **Choose a certificate from ACM**.
      - If you do not have a certificate from ACM, select **Upload a certificate to ACM**. For more information, see [Importing Certificates into AWS Certificate Manager](https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html) in the AWS documentation.
        <p class='note'><strong>Note:</strong> For a production or production-like environment, use a certificate from a Certificate Authority (CA). This can be an internal certificate or a purchased certificate. For a sandbox environment, you can use a self-signed certificate, leaving the **Certificate chain** entry blank.</p>
  1. Click **Next: Configure Security Groups**.

1. For **Step 3: Configure Security Groups**:
  1. Under **Assign a security group**, select **Select an existing security group**.
  1. From the list of security groups, select the `pcf-web-elb-security-group` security group that you configured in [Configure a Security Group for the Web ELB](prepare-env-manual.html#pcfaws-om-elbsecgrp) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.
  1. Click **Next: Configure Routing**.

1. For **Step 4: Configure Routing**:
  1. Under **Target Group**, enter the following values:
      - **Name**: Enter `pcf-web-elb-target-group`.
      - **Target type**: Select **Instance**.
      - **Protocol**: Select **HTTP**.
      - **Port**: Enter `80`.
  1. Under **Health checks**, senter the following values:
      - **Protocol**: Select **HTTP**.
      - **Path**: Enter `/health`.
  1. Under **Advanced health check settings**, enter the following values:
      - **Port**: Select **override** and enter `8080`.
      - **Healthy threshold**: Enter `6`.
      - **Unhealthy threshold**: Enter `3`.
      - **Timeout**: Enter `3`.
      - **Interval**: Enter `5`.
      - **Success codes**: Enter `200`.
  1. Click **Next: Register Targets**.

1. For **Step 5: Register Targets**, accept the default values and click **Next: Review**.

1. For **Step 6: Review**, review the load balancer details and then click **Create**. A message appears to confirm AWS successfully created the load balancer.


## <a id='pcfaws-ssh-lb'></a> Step 3: Create SSH Load Balancer

1. From the **Load Balancers** page, click **Create Load Balancer**.

1. Select **Network Load Balancer**.

1. For **Step 1: Configure Load Balancer**, do the following:
  1. Under **Basic Configuration**, do the following:
      * For **Name**, enter `pcf-ssh-elb`.
      * For **Scheme**, select **internet-facing** to allow traffic from public IP addresses, or **internal** to allow traffic only from private IP addresses.
      * For **IP address type**, select the type of IP addresses that you want to allow.
  1. Under **Listeners**, edit the existing listener. For **Load Balancer Protocol**, select **TCP**, for **Load Balancer Port**, enter `2222`.
  1. Under **Availability Zones**, select your VPC
  1. Check all availability zones. For each availability zone, select `pcf-public-subnet-az0` to allow traffic from public IP addresses, or `pcf-management-subnet-az0` to allow traffic only from private IP addresses.
  1. Click **Next: Configure Security Settings**.
1. On the **Configure Security Settings** page, ignore the **Improve your load balancer's security** error message and click **Next: Configure Routing**.

1. For **Step 3: Configure Routing**, do the following:
  1. Under **Target Group**, enter the following values:
      - **Name**: Enter `pcf-ssh-elb-target-group`.
      - **Target type**: Select **Instance**.
      - **Protocol**: Select **TCP**.
      - **Port**: Enter `2222`.
  1. Under **Health checks**, senter the following values:
      - **Protocol**: Select **TCP**.
  1. Under **Advanced health check settings**, enter the following values:
      - **Port**: Select **traffic port**.
      - **Healthy threshold**: Enter `6`.
      - **Interval**: Select `10 seconds`.
  1. Click **Next: Register Targets**.

1. For **Step 4: Register Targets**, accept the default values and click **Next: Review**.

1. For **Step 5: Review**, review the load balancer details and then click **Create**. A message appears to confirm AWS successfully created the load balancer.


## <a id='pcfaws-tcp-lb'></a> Step 4: Create TCP Load Balancer

1. From the **Load Balancers** page, click **Create Load Balancer**.

1. Select **Classic Load Balancer**.

1. Configure the load balancer with the following information:
    * **Load Balancer name**: Enter `pcf-tcp-elb`.
    * **Create LB Inside**: Select the `pcf-vpc` VPC that you created in [Create a VPC](prepare-env-manual.html#pcfaws-vpc) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.
    * If you want to allow traffic from public IP addresses, ensure that the **Create an internal load balancer** checkbox is not selected. If you want to allow traffic only from private IP addresses, select this checkbox.

1. Under **Listener Configuration**, add the following rules:

    <table border="1" class="nice" >
    <tr>
      <th><strong>Load Balancer Protocol</strong></th>
      <th><strong>Load Balancer Port</strong></th>
      <th><strong>Instance Protocol</strong></th>
      <th><strong>Instance Port</strong></th>
    </tr>
    <tr>
      <td>TCP</td>
      <td>1024</td>
      <td>TCP</td>
      <td>1024</td>
    </tr>
    <tr>
      <td>TCP</td>
      <td>1025</td>
      <td>TCP</td>
      <td>1025</td>
    </tr>
    <tr>
      <td>TCP</td>
      <td>1026</td>
      <td>TCP</td>
      <td>1026</td>
    </tr>
    <tr>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <td>TCP</td>
      <td>1123</td>
      <td>TCP</td>
      <td>1123</td>
    </tr>
    </table>

      <br>
      The `...` entry above indicates that you must add listening rules for each port between 1026 and 1123.

1. Under **Select Subnets**, select either the public or private subnets you configured in [Create a VPC](prepare-env-manual.html#pcfaws-vpc) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_, and click **Next: Assign Security Groups**.

1. On the **Assign Security Groups** page, select the security group `pcf-tcp-elb-security-group` you configured in [Configure a Security Group for the TCP ELB](prepare-env-manual.html#pcfaws-om-tcpelbsecgrp) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_, and click **Next: Configure Security Settings**.

1. On the **Configure Security Settings** page, ignore the **Improve you load balancer's security** error message and click **Next: Configure Health Check**.

1. On the **Configure Health Check** page, enter the following values:

  * **Ping Protocol**: Select `TCP`.
  * **Ping Port**: Set to `80`.
  * **Response Timeout**: Set to `3` seconds.
  * **Interval**: Set to `5` seconds.
  * **Unhealthy threshold**: Set to `3`.
  * **Health threshold**: Set to `6`.

1. Click **Next: Add EC2 Instances**.

1. Accept the defaults on the **Add EC2 Instances** page and click **Next: Add Tags**.

1. Accept the defaults on the **Add Tags** page and click **Review and Create**.

1. Review and confirm the load balancer details, and click **Create**.


## <a id='pcfaws-dns'></a> Step 5: Configure DNS Records

1. Perform the following steps for all three of the load balancers you created in previous steps, named `pcf-web-elb`, `pcf-ssh-elb`, and `pcf-tcp-elb`:
  1. From the **Load Balancers** page, select the load balancer.
  1. On the **Description** tab, locate the **Basic Configuration** section and record the **DNS name** of the load balancer.

1. Click **Instances** on the left navigation to view your EC2 instances.

1. Select the `pcf-ops-manager` instance created in Step 1: Launch an Ops Manager AMI.

1. On the **Description** tab, record the value for **IPv4 Public IP**.

1. Navigate to your DNS provider and create the following CNAME and A records:
  * CNAME: `*.apps.DOMAIN.com` and `*.system.DOMAIN.com` points to the DNS name of the `pcf-web-elb` load balancer.
  * CNAME: `ssh.system.DOMAIN.com` points to the DNS name of the `pcf-ssh-elb` load balancer.
  * CNAME: `tcp.system.DOMAIN.com` points to the DNS name of the `pcf-tcp-elb` load balancer.
  * A: `pcf.DOMAIN.com` points to the public IP address of the `pcf-ops-manager` EC2 instance.
  </br>
  </br>
  Where `DOMAIN` is a domain name. <%= vars.company_name %> recommends that you use the same domain name for each record.


## <a id='pcfaws-rds-subnet-group'></a> Step 6: Create RDS Subnet Group

1. Navigate to the RDS Dashboard.

1. Perform the following steps to create a RDS Subnet Group for the two RDS subnets:
    1. Click **Subnet Groups>Create DB Subnet Group**.
    1. Enter the following values:
        * **Name**: Enter `pcf-rds-subnet-group`.
        * **Description**: Enter a description to identify this subnet group.
        * **VPC ID**: Select `pcf-vpc`.
        * **Availability Zone** and **Subnet ID**: Choose the AZ and subnet for `pcf-rds-subnet-az0` and click **Add**.
    1. Repeat the steps above to add `pcf-rds-subnet-az1` and `pcf-rds-subnet-az2` to the group.
    1. Click **Create**.

    <p class='note'><strong>Note:</strong> On the Subnet Group page, you may need to refresh the page to view the new group.</p>


## <a id='pcfaws-mysql-rds'></a> Step 7: Create a MySQL Database Using AWS RDS

<p class='note'><strong>Note:</strong> You must have an empty MySQL database when you install or reinstall <%= vars.ops_manager %> on AWS.</p>

1. Navigate to the RDS Dashboard.

1. Click **Create database** to launch the wizard.

1. Select the **MySQL** radio button under **Engine type**.

1. Select the **Production** radio button under **Templates** to create a database for production environments.

1. Specify the following database details:
    * **DB Instance Identifier**: Enter `pcf-ops-manager-director`.
    * Enter a secure **Master Username** and **Master Password**.
          <p class='note'><strong>Note:</strong> Record the username and password. You need these credentials later when configuring the <strong>Director Config</strong> page in the BOSH Director tile.</p>
    * **DB Instance Class**: Select **db.m5.large - 2 vCPU, 7.5 GiB RAM**.
    * **Storage Type**: Select `Provisioned IOPS SSD`.
    * **Allocated Storage**: Enter **100&nbsp;GB**.
    * **Multi-AZ Deployment**: Select **Create a standby instance**.

1. In the **Connectivity** section, enter the following values:
    * **VPC**: Select `pcf-vpc`.
    * **Subnet Group**: Select the `pcf-rds-subnet-group` you created in [Step 6: Create RDS Subnet Group](#pcfaws-rds-subnet-group).
    * **Publicly Accessible**: Select **No**.
    * **VPC Security Groups**: Select the `pcf-mysql-security-group` that you created in [Configure a Security Group for MySQL](prepare-env-manual.html#pcfaws-om-mysqlsecgrp) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.
    * Accept the default values for the remaining fields.

1. In the **Additional configuration** section, enter the following values:
    * **Initial Database Name**: Enter `bosh`.
    * Accept the default values for the remaining fields.

1. Click **Launch DB Instance**. Launching the instance may take several minutes.

## <a id='next'></a> Next Steps

When the instance has launched, you can do either of the following:

- Review [Required AWS Objects](required-objects.html) to verify that you created the correct resources in AWS.
- Proceed to [Configuring BOSH Director on AWS](config-manual.html) to continue deploying <%= vars.ops_manager %>.
