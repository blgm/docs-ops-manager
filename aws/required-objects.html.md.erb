---
title: Required AWS Objects
owner: Ops Manager
---

This topic describes the objects you create in Amazon Web Services (AWS) in order to deploy <%= vars.ops_manager_first %>.


## <a id='overview'></a> Overview

Use this topic to determine the resource requirements of <%= vars.ops_manager %> on AWS, or to verify that you created the correct resources after completing the procedures in [Preparing to Deploy <%= vars.ops_manager %> on AWS](prepare-env-manual.html) and [Deploying <%= vars.ops_manager %> on AWS](deploy-manual.html).

## <a id='s3-buckets-om-pas'></a> S3 Buckets

As part of the preparing to deploy process, you must create the following S3 buckets from the S3 Dashboard:

* `pcf-ops-manager-bucket`
* `pcf-buildpacks-bucket`
* `pcf-packages-bucket`
* `pcf-resources-bucket`
* `pcf-droplets-bucket`

These buckets must be empty when you install or reinstall <%= vars.ops_manager %>.

See [Create S3 Buckets](prepare-env-manual.html#create-s3) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.

## <a id='iam-user-pcf'></a> IAM Role or User for <%= vars.ops_manager %>

You must create either an IAM role or an IAM user for <%= vars.ops_manager %> named `pcf-user` from the Identity and Access Management Dashboard, using the policy document included in [<%= vars.ops_manager %> for AWS Policy Document](../install/policy-doc.html).

See [Create an IAM Role or User for <%= vars.ops_manager %>](prepare-env-manual.html#create-iam) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.

## <a id='key-pair'></a> Key Pair

You must generate a key pair named `pcf-ops-manager-key`. For more information about setting up a key pair, see [Amazon EC2 Key
Pairs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the AWS documentation.

## <a id='vpc'></a> VPC (Public and Private Subnets)

You must create a VPC with public and private subnets from the VPC Dashboard.

The following table lists the subnets in CIDR block `10.0.0.0/16`.

 <table>
 <tr>
   <th>Name</th>
   <th>AZ</th>
   <th>IPv4 CIDR block</th>
 </tr>
 <tr>
   <td>`pcf-public-subnet-az0`</td>
   <td>`REGION-#a` (for example, `us-west-2a`)</td>
   <td>`10.0.0.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-public-subnet-az1`</td>
   <td>`REGION-#b` (for example, `us-west-2b`)</td>
   <td>`10.0.1.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-public-subnet-az2`</td>
   <td>`REGION-#c` (for example, `us-west-2c`)</td>
   <td>`10.0.2.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-management-subnet-az0`</td>
   <td>`REGION-#a` (for example, `us-west-2a`)</td>
   <td>`10.0.16.0/28`</td>
 </tr>
 <tr>
   <td>`pcf-management-subnet-az1`</td>
   <td>`REGION-#b` (for example, `us-west-2b`)</td>
   <td>`10.0.16.16/28`</td>
 </tr>
 <tr>
   <td>`pcf-management-subnet-az2`</td>
   <td>`REGION-#c` (for example, `us-west-2c`)</td>
   <td>`10.0.16.32/28`</td>
 </tr>
 <tr>
   <td>`pcf-ert-subnet-az0`</td>
   <td>`REGION-#a` (for example, `us-west-2a`)</td>
   <td>`10.0.4.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-ert-subnet-az1`</td>
   <td>`REGION-#b` (for example, `us-west-2b`)</td>
   <td>`10.0.5.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-ert-subnet-az2`</td>
   <td>`REGION-#c` (for example, `us-west-2c`)</td>
   <td>`10.0.6.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-services-subnet-az0`</td>
   <td>`REGION-#a` (for example, `us-west-2a`)</td>
   <td>`10.0.8.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-services-subnet-az1`</td>
   <td>`REGION-#b` (for example, `us-west-2b`)</td>
   <td>`10.0.9.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-services-subnet-az2`</td>
   <td>`REGION-#c` (for example, `us-west-2c`)</td>
   <td>`10.0.10.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-rds-subnet-az0`</td>
   <td>`REGION-#a` (for example, `us-west-2a`)</td>
   <td>`10.0.12.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-rds-subnet-az1`</td>
   <td>`REGION-#b` (for example, `us-west-2b`)</td>
   <td>`10.0.13.0/24`</td>
 </tr>
 <tr>
   <td>`pcf-rds-subnet-az2`</td>
   <td>`REGION-#c` (for example, `us-west-2c`)</td>
   <td>`10.0.14.0/24`</td>
 </tr>
 </table>

See [Create a VPC](prepare-env-manual.html#pcfaws-vpc) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.

## <a id='nat-instance'></a> NAT Gateway

You must create a NAT Gateway when creating a VPC.

See [Create a NAT Gateway](prepare-env-manual.html#pcfaws-nat-gateway) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.

## <a id='security-groups'></a> Security Groups

The following sections describe the security groups you must create from the EC2 Dashboard.

### <%= vars.ops_manager %>

The <%= vars.ops_manager %> Security Group must be named `pcf-ops-manager-security-group` and have the following inbound rules:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th><strong>Source</strong></th>
</tr>
<tr>
  <td>HTTP</td>
  <td>TCP</td>
  <td>80</td>
  <td>My IP</td>
</tr>
<tr>
  <td>HTTPS</td>
  <td>TCP</td>
  <td>443</td>
  <td>My IP</td>
</tr>
<tr>
  <td>SSH</td>
  <td>TCP</td>
  <td>22</td>
  <td>My IP</td>
</tr>
<tr>
  <td>BOSH Agent</td>
  <td>TCP</td>
  <td>6868</td>
  <td>10.0.0.0/16</td>
</tr>
<tr>
  <td>BOSH Director</td>
  <td>TCP</td>
  <td>25555</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

See [Configure a Security Group for <%= vars.ops_manager %>](prepare-env-manual.html#pcfaws-om-secgrp) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.

### BOSH-Deployed VMs

The BOSH-deployed VMs Security Group must be named `pcf-vms-security-group` and have the following inbound rule:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>All traffic</td>
  <td>All</td>
  <td>0 - 65535</td>
  <td>Custom IP</td>
  <td>10.0.0.0/16</td>
</tr>
<tr>
  <td>Custom TCP rule</td>
  <td>TCP</td>
  <td>2222</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

See [Configure a Security Group for BOSH-Deployed VMs](prepare-env-manual.html#pcfaws-om-ersecgrp)
in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.

### Web ELB

The Web ELB Security Group must be named `pcf-web-elb-security-group` and have the following inbound rules:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>Custom TCP rule</td>
  <td>TCP</td>
  <td>4443</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
<tr>
  <td>HTTP</td>
  <td>TCP</td>
  <td>80</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
<tr>
  <td>HTTPS</td>
  <td>TCP</td>
  <td>443</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

See [Configure a Security Group for the Web ELB](prepare-env-manual.html#pcfaws-om-elbsecgrp) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.

### TCP ELB

The TCP ELB Security Group must be named `pcf-tcp-elb-security-group` and have the following inbound rule:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>Custom TCP rule</td>
  <td>TCP</td>
  <td>1024 - 1123</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

The TCP ELB Security Group must have the following outbound rule:
<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>All traffic</td>
  <td>All</td>
  <td>All</td>
  <td>Anywhere</td>
  <td>0.0.0.0/0</td>
</tr>
</table>

See [Configure a Security Group for the TCP ELB](prepare-env-manual.html#pcfaws-om-tcpelbsecgrp) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.

### MySQL

The MySQL Security Group must be named `pcf-mysql-security-group` and have the following inbound rules:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Source</strong></th>
</tr>
<tr>
  <td>MySQL</td>
  <td>TCP</td>
  <td>3306</td>
  <td>Custom IP</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

The MySQL Security Group must have the following outbound rules:

<table border="1" class="nice" >
<tr>
  <th><strong>Type </strong></th>
  <th><strong>Protocol</strong></th>
  <th><strong>Port Range</strong></th>
  <th colspan='2'><strong>Destination</strong></th>
</tr>
<tr>
  <td>All traffic</td>
  <td>All</td>
  <td>All</td>
  <td>Custom IP</td>
  <td>10.0.0.0/16</td>
</tr>
</table>

See [Configure a Security Group for MySQL](prepare-env-manual.html#pcfaws-om-mysqlsecgrp) in _Preparing to Deploy <%= vars.ops_manager %> on AWS_.

## <a id='ops-manager-ami'></a> <%= vars.ops_manager %> AMI

You must locate the public <%= vars.ops_manager %> AMI using the AMI ID provided by the PDF downloaded when clicking **<%= vars.ops_manager %> for AWS** on VMware Tanzu Network.

See [Step 1: Launch an <%= vars.ops_manager %> AMI](deploy-manual.html#pcfaws-om-ami) in _Deploying <%= vars.ops_manager %> on AWS_.

## <a id='elbs'></a> ELBs

The following sections describe the ELBs you must create from the EC2 Dashboard.

### Web ELB

You must create a web ELB with the following configuration:

* **Name**: `pcf-web-elb`
* **LB Inside**: `pcf-vpc`
* **Selected Subnet**: `pcf-public-subnet-az0`, `pcf-public-subnet-az1`, `pcf-public-subnet-az2`
* **Security Group**: `pcf-elb-security-group`
* **Health Check**: TCP Port 8080, Path: `/health`

See [Step 2: Create Web Load Balancer](deploy-manual.html#pcfaws-web-lb) in _Deploying <%= vars.ops_manager %> on AWS_.

### SSH ELB

* **Name**: `pcf-ssh-elb`
* **LB Inside**: `pcf-vpc`
* **Selected Subnet**: `pcf-public-subnet-az0`, `pcf-public-subnet-az1`, `pcf-public-subnet-az2`
* **Security Group**: `pcf-ssh-security-group`
* **Health Check**: TCP Port 2222

See [Step 3: Create SSH Load Balancer](deploy-manual.html#pcfaws-ssh-lb) in _Deploying <%= vars.ops_manager %> on AWS_.

### TCP ELB

* **Name**: `pcf-tcp-elb`
* **LB Inside**: `pcf-vpc`
* **Selected Subnet**: `pcf-public-subnet-az0`, `pcf-public-subnet-az1`, `pcf-public-subnet-az2`
* **Security Group**: `pcf-tcp-security-group`
* **Health Check**: TCP Port 80

See [Step 4: Create TCP Load Balancer](deploy-manual.html#pcfaws-tcp-lb) in _Deploying <%= vars.ops_manager %> on AWS_.

## <a id='dns-config'></a> DNS Configuration

You must navigate to your DNS provider and create CNAME and A records for all three of your load balancers.

See [Step 5: Configure DNS Records](deploy-manual.html#pcfaws-dns) in _Deploying <%= vars.ops_manager %> on AWS_.

## <a id='rds-subnet-group'></a> RDS Subnet Group

You must create a subnet group for RDS named `pcf-rds-subnet-group` from the RDS Dashboard.

See [Step 6: Create RDS Subnet Group](deploy-manual.html#pcfaws-rds-subnet-group) in _Deploying <%= vars.ops_manager %> on AWS_.

## <a id='mysql-db'></a> MySQL Database

You must create a MySQL database from the RDS Dashboard.

See [Step 7: Create a MySQL Database using AWS RDS](deploy-manual.html#pcfaws-mysql-rds) in _Deploying <%= vars.ops_manager %> on AWS_.
